// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DSRGraph.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DSRGRAPH_H_
#define _DSRGRAPH_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DSRGraph_SOURCE)
#define DSRGraph_DllAPI __declspec( dllexport )
#else
#define DSRGraph_DllAPI __declspec( dllimport )
#endif // DSRGraph_SOURCE
#else
#define DSRGraph_DllAPI
#endif
#else
#define DSRGraph_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure EdgeAttribs defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class EdgeAttribs
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EdgeAttribs();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EdgeAttribs();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EdgeAttribs that will be copied.
     */
    eProsima_user_DllExport EdgeAttribs(const EdgeAttribs &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EdgeAttribs that will be copied.
     */
    eProsima_user_DllExport EdgeAttribs(EdgeAttribs &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EdgeAttribs that will be copied.
     */
    eProsima_user_DllExport EdgeAttribs& operator=(const EdgeAttribs &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EdgeAttribs that will be copied.
     */
    eProsima_user_DllExport EdgeAttribs& operator=(EdgeAttribs &&x);

    /*!
     * @brief This function copies the value in member label
     * @param _label New value to be copied in member label
     */
    eProsima_user_DllExport void label(const std::string &_label);

    /*!
     * @brief This function moves the value in member label
     * @param _label New value to be moved in member label
     */
    eProsima_user_DllExport void label(std::string &&_label);

    /*!
     * @brief This function returns a constant reference to member label
     * @return Constant reference to member label
     */
    eProsima_user_DllExport const std::string& label() const;

    /*!
     * @brief This function returns a reference to member label
     * @return Reference to member label
     */
    eProsima_user_DllExport std::string& label();
    /*!
     * @brief This function sets a value in member from
     * @param _from New value for member from
     */
    eProsima_user_DllExport void from(uint32_t _from);

    /*!
     * @brief This function returns the value of member from
     * @return Value of member from
     */
    eProsima_user_DllExport uint32_t from() const;

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport uint32_t& from();

    /*!
     * @brief This function sets a value in member to
     * @param _to New value for member to
     */
    eProsima_user_DllExport void to(uint32_t _to);

    /*!
     * @brief This function returns the value of member to
     * @return Value of member to
     */
    eProsima_user_DllExport uint32_t to() const;

    /*!
     * @brief This function returns a reference to member to
     * @return Reference to member to
     */
    eProsima_user_DllExport uint32_t& to();

    /*!
     * @brief This function copies the value in member attrs
     * @param _attrs New value to be copied in member attrs
     */
    eProsima_user_DllExport void attrs(const std::map<uint32_t, std::string> &_attrs);

    /*!
     * @brief This function moves the value in member attrs
     * @param _attrs New value to be moved in member attrs
     */
    eProsima_user_DllExport void attrs(std::map<uint32_t, std::string> &&_attrs);

    /*!
     * @brief This function returns a constant reference to member attrs
     * @return Constant reference to member attrs
     */
    eProsima_user_DllExport const std::map<uint32_t, std::string>& attrs() const;

    /*!
     * @brief This function returns a reference to member attrs
     * @return Reference to member attrs
     */
    eProsima_user_DllExport std::map<uint32_t, std::string>& attrs();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const EdgeAttribs& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::string m_label;
    uint32_t m_from;
    uint32_t m_to;
    std::map<uint32_t, std::string> m_attrs;
};
/*!
 * @brief This class represents the structure Content defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class Content
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Content();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Content();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Content that will be copied.
     */
    eProsima_user_DllExport Content(const Content &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Content that will be copied.
     */
    eProsima_user_DllExport Content(Content &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Content that will be copied.
     */
    eProsima_user_DllExport Content& operator=(const Content &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Content that will be copied.
     */
    eProsima_user_DllExport Content& operator=(Content &&x);

    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(const std::string &_type);

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(std::string &&_type);

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type();
    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();

    /*!
     * @brief This function copies the value in member attrs
     * @param _attrs New value to be copied in member attrs
     */
    eProsima_user_DllExport void attrs(const std::map<uint32_t, std::string> &_attrs);

    /*!
     * @brief This function moves the value in member attrs
     * @param _attrs New value to be moved in member attrs
     */
    eProsima_user_DllExport void attrs(std::map<uint32_t, std::string> &&_attrs);

    /*!
     * @brief This function returns a constant reference to member attrs
     * @return Constant reference to member attrs
     */
    eProsima_user_DllExport const std::map<uint32_t, std::string>& attrs() const;

    /*!
     * @brief This function returns a reference to member attrs
     * @return Reference to member attrs
     */
    eProsima_user_DllExport std::map<uint32_t, std::string>& attrs();
    /*!
     * @brief This function copies the value in member fano
     * @param _fano New value to be copied in member fano
     */
    eProsima_user_DllExport void fano(const std::map<uint32_t, EdgeAttribs> &_fano);

    /*!
     * @brief This function moves the value in member fano
     * @param _fano New value to be moved in member fano
     */
    eProsima_user_DllExport void fano(std::map<uint32_t, EdgeAttribs> &&_fano);

    /*!
     * @brief This function returns a constant reference to member fano
     * @return Constant reference to member fano
     */
    eProsima_user_DllExport const std::map<uint32_t, EdgeAttribs>& fano() const;

    /*!
     * @brief This function returns a reference to member fano
     * @return Reference to member fano
     */
    eProsima_user_DllExport std::map<uint32_t, EdgeAttribs>& fano();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Content& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::string m_type;
    uint32_t m_id;
    std::map<uint32_t, std::string> m_attrs;
    std::map<uint32_t, EdgeAttribs> m_fano;
};
/*!
 * @brief This class represents the structure DSRGraphTopic defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class DSRGraphTopic
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DSRGraphTopic();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DSRGraphTopic();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DSRGraphTopic that will be copied.
     */
    eProsima_user_DllExport DSRGraphTopic(const DSRGraphTopic &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DSRGraphTopic that will be copied.
     */
    eProsima_user_DllExport DSRGraphTopic(DSRGraphTopic &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DSRGraphTopic that will be copied.
     */
    eProsima_user_DllExport DSRGraphTopic& operator=(const DSRGraphTopic &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DSRGraphTopic that will be copied.
     */
    eProsima_user_DllExport DSRGraphTopic& operator=(DSRGraphTopic &&x);

    /*!
     * @brief This function copies the value in member DSRGraph
     * @param _DSRGraph New value to be copied in member DSRGraph
     */
    eProsima_user_DllExport void DSRGraph(const std::map<uint32_t, Content> &_DSRGraph);

    /*!
     * @brief This function moves the value in member DSRGraph
     * @param _DSRGraph New value to be moved in member DSRGraph
     */
    eProsima_user_DllExport void DSRGraph(std::map<uint32_t, Content> &&_DSRGraph);

    /*!
     * @brief This function returns a constant reference to member DSRGraph
     * @return Constant reference to member DSRGraph
     */
    eProsima_user_DllExport const std::map<uint32_t, Content>& DSRGraph() const;

    /*!
     * @brief This function returns a reference to member DSRGraph
     * @return Reference to member DSRGraph
     */
    eProsima_user_DllExport std::map<uint32_t, Content>& DSRGraph();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const DSRGraphTopic& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::map<uint32_t, Content> m_DSRGraph;
};

#endif // _DSRGRAPH_H_