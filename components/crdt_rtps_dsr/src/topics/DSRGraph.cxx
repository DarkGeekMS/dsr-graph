// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DSRGraph.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "DSRGraph.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

EdgeAttribs::EdgeAttribs()
{
    // m_label com.eprosima.idl.parser.typecode.StringTypeCode@7b49cea0
    m_label ="";
    // m_from com.eprosima.idl.parser.typecode.PrimitiveTypeCode@887af79
    m_from = 0;
    // m_to com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7fac631b
    m_to = 0;
    // m_attrs com.eprosima.idl.parser.typecode.MapTypeCode@5b87ed94


}

EdgeAttribs::~EdgeAttribs()
{




}

EdgeAttribs::EdgeAttribs(const EdgeAttribs &x)
{
    m_label = x.m_label;
    m_from = x.m_from;
    m_to = x.m_to;
    m_attrs = x.m_attrs;
}

EdgeAttribs::EdgeAttribs(EdgeAttribs &&x)
{
    m_label = std::move(x.m_label);
    m_from = x.m_from;
    m_to = x.m_to;
    m_attrs = std::move(x.m_attrs);
}

EdgeAttribs& EdgeAttribs::operator=(const EdgeAttribs &x)
{

    m_label = x.m_label;
    m_from = x.m_from;
    m_to = x.m_to;
    m_attrs = x.m_attrs;

    return *this;
}

EdgeAttribs& EdgeAttribs::operator=(EdgeAttribs &&x)
{

    m_label = std::move(x.m_label);
    m_from = x.m_from;
    m_to = x.m_to;
    m_attrs = std::move(x.m_attrs);

    return *this;
}

size_t EdgeAttribs::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    }


    return current_alignment - initial_alignment;
}

size_t EdgeAttribs::getCdrSerializedSize(const EdgeAttribs& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.label().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.attrs())
    {
        (void)a;
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;

    }



    return current_alignment - initial_alignment;
}

void EdgeAttribs::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_label;
    scdr << m_from;
    scdr << m_to;
    scdr << m_attrs;
}

void EdgeAttribs::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_label;
    dcdr >> m_from;
    dcdr >> m_to;
    dcdr >> m_attrs;
}

/*!
 * @brief This function copies the value in member label
 * @param _label New value to be copied in member label
 */
void EdgeAttribs::label(const std::string &_label)
{
m_label = _label;
}

/*!
 * @brief This function moves the value in member label
 * @param _label New value to be moved in member label
 */
void EdgeAttribs::label(std::string &&_label)
{
m_label = std::move(_label);
}

/*!
 * @brief This function returns a constant reference to member label
 * @return Constant reference to member label
 */
const std::string& EdgeAttribs::label() const
{
    return m_label;
}

/*!
 * @brief This function returns a reference to member label
 * @return Reference to member label
 */
std::string& EdgeAttribs::label()
{
    return m_label;
}
/*!
 * @brief This function sets a value in member from
 * @param _from New value for member from
 */
void EdgeAttribs::from(uint32_t _from)
{
m_from = _from;
}

/*!
 * @brief This function returns the value of member from
 * @return Value of member from
 */
uint32_t EdgeAttribs::from() const
{
    return m_from;
}

/*!
 * @brief This function returns a reference to member from
 * @return Reference to member from
 */
uint32_t& EdgeAttribs::from()
{
    return m_from;
}

/*!
 * @brief This function sets a value in member to
 * @param _to New value for member to
 */
void EdgeAttribs::to(uint32_t _to)
{
m_to = _to;
}

/*!
 * @brief This function returns the value of member to
 * @return Value of member to
 */
uint32_t EdgeAttribs::to() const
{
    return m_to;
}

/*!
 * @brief This function returns a reference to member to
 * @return Reference to member to
 */
uint32_t& EdgeAttribs::to()
{
    return m_to;
}

/*!
 * @brief This function copies the value in member attrs
 * @param _attrs New value to be copied in member attrs
 */
void EdgeAttribs::attrs(const std::map<uint32_t, std::string> &_attrs)
{
m_attrs = _attrs;
}

/*!
 * @brief This function moves the value in member attrs
 * @param _attrs New value to be moved in member attrs
 */
void EdgeAttribs::attrs(std::map<uint32_t, std::string> &&_attrs)
{
m_attrs = std::move(_attrs);
}

/*!
 * @brief This function returns a constant reference to member attrs
 * @return Constant reference to member attrs
 */
const std::map<uint32_t, std::string>& EdgeAttribs::attrs() const
{
    return m_attrs;
}

/*!
 * @brief This function returns a reference to member attrs
 * @return Reference to member attrs
 */
std::map<uint32_t, std::string>& EdgeAttribs::attrs()
{
    return m_attrs;
}

size_t EdgeAttribs::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;







    return current_align;
}

bool EdgeAttribs::isKeyDefined()
{
   return false;
}

void EdgeAttribs::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
}

Content::Content()
{
    // m_type com.eprosima.idl.parser.typecode.StringTypeCode@4abdb505
    m_type ="";
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7ce6a65d
    m_id = 0;
    // m_attrs com.eprosima.idl.parser.typecode.MapTypeCode@1500955a

    // m_fano com.eprosima.idl.parser.typecode.MapTypeCode@e874448


}

Content::~Content()
{




}

Content::Content(const Content &x)
{
    m_type = x.m_type;
    m_id = x.m_id;
    m_attrs = x.m_attrs;
    m_fano = x.m_fano;
}

Content::Content(Content &&x)
{
    m_type = std::move(x.m_type);
    m_id = x.m_id;
    m_attrs = std::move(x.m_attrs);
    m_fano = std::move(x.m_fano);
}

Content& Content::operator=(const Content &x)
{

    m_type = x.m_type;
    m_id = x.m_id;
    m_attrs = x.m_attrs;
    m_fano = x.m_fano;

    return *this;
}

Content& Content::operator=(Content &&x)
{

    m_type = std::move(x.m_type);
    m_id = x.m_id;
    m_attrs = std::move(x.m_attrs);
    m_fano = std::move(x.m_fano);

    return *this;
}

size_t Content::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        current_alignment += EdgeAttribs::getMaxCdrSerializedSize(current_alignment);
    }


    return current_alignment - initial_alignment;
}

size_t Content::getCdrSerializedSize(const Content& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.type().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.attrs())
    {
        (void)a;
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;

    }


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.fano())
    {
        (void)a;
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
        current_alignment += EdgeAttribs::getCdrSerializedSize((a.second), current_alignment);

    }



    return current_alignment - initial_alignment;
}

void Content::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_type;
    scdr << m_id;
    scdr << m_attrs;
    scdr << m_fano;
}

void Content::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_type;
    dcdr >> m_id;
    dcdr >> m_attrs;
    dcdr >> m_fano;
}

/*!
 * @brief This function copies the value in member type
 * @param _type New value to be copied in member type
 */
void Content::type(const std::string &_type)
{
m_type = _type;
}

/*!
 * @brief This function moves the value in member type
 * @param _type New value to be moved in member type
 */
void Content::type(std::string &&_type)
{
m_type = std::move(_type);
}

/*!
 * @brief This function returns a constant reference to member type
 * @return Constant reference to member type
 */
const std::string& Content::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
std::string& Content::type()
{
    return m_type;
}
/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void Content::id(uint32_t _id)
{
m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t Content::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& Content::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member attrs
 * @param _attrs New value to be copied in member attrs
 */
void Content::attrs(const std::map<uint32_t, std::string> &_attrs)
{
m_attrs = _attrs;
}

/*!
 * @brief This function moves the value in member attrs
 * @param _attrs New value to be moved in member attrs
 */
void Content::attrs(std::map<uint32_t, std::string> &&_attrs)
{
m_attrs = std::move(_attrs);
}

/*!
 * @brief This function returns a constant reference to member attrs
 * @return Constant reference to member attrs
 */
const std::map<uint32_t, std::string>& Content::attrs() const
{
    return m_attrs;
}

/*!
 * @brief This function returns a reference to member attrs
 * @return Reference to member attrs
 */
std::map<uint32_t, std::string>& Content::attrs()
{
    return m_attrs;
}
/*!
 * @brief This function copies the value in member fano
 * @param _fano New value to be copied in member fano
 */
void Content::fano(const std::map<uint32_t, EdgeAttribs> &_fano)
{
m_fano = _fano;
}

/*!
 * @brief This function moves the value in member fano
 * @param _fano New value to be moved in member fano
 */
void Content::fano(std::map<uint32_t, EdgeAttribs> &&_fano)
{
m_fano = std::move(_fano);
}

/*!
 * @brief This function returns a constant reference to member fano
 * @return Constant reference to member fano
 */
const std::map<uint32_t, EdgeAttribs>& Content::fano() const
{
    return m_fano;
}

/*!
 * @brief This function returns a reference to member fano
 * @return Reference to member fano
 */
std::map<uint32_t, EdgeAttribs>& Content::fano()
{
    return m_fano;
}

size_t Content::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;







    return current_align;
}

bool Content::isKeyDefined()
{
   return false;
}

void Content::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
}

DSRGraphTopic::DSRGraphTopic()
{
    // m_DSRGraph com.eprosima.idl.parser.typecode.MapTypeCode@59906517


}

DSRGraphTopic::~DSRGraphTopic()
{
}

DSRGraphTopic::DSRGraphTopic(const DSRGraphTopic &x)
{
    m_DSRGraph = x.m_DSRGraph;
}

DSRGraphTopic::DSRGraphTopic(DSRGraphTopic &&x)
{
    m_DSRGraph = std::move(x.m_DSRGraph);
}

DSRGraphTopic& DSRGraphTopic::operator=(const DSRGraphTopic &x)
{

    m_DSRGraph = x.m_DSRGraph;

    return *this;
}

DSRGraphTopic& DSRGraphTopic::operator=(DSRGraphTopic &&x)
{

    m_DSRGraph = std::move(x.m_DSRGraph);

    return *this;
}

size_t DSRGraphTopic::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        current_alignment += Content::getMaxCdrSerializedSize(current_alignment);
    }

    return current_alignment - initial_alignment;
}

size_t DSRGraphTopic::getCdrSerializedSize(const DSRGraphTopic& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.DSRGraph())
    {
        (void)a;
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
        current_alignment += Content::getCdrSerializedSize((a.second), current_alignment);

    }


    return current_alignment - initial_alignment;
}

void DSRGraphTopic::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_DSRGraph;}

void DSRGraphTopic::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_DSRGraph;}

/*!
 * @brief This function copies the value in member DSRGraph
 * @param _DSRGraph New value to be copied in member DSRGraph
 */
void DSRGraphTopic::DSRGraph(const std::map<uint32_t, Content> &_DSRGraph)
{
m_DSRGraph = _DSRGraph;
}

/*!
 * @brief This function moves the value in member DSRGraph
 * @param _DSRGraph New value to be moved in member DSRGraph
 */
void DSRGraphTopic::DSRGraph(std::map<uint32_t, Content> &&_DSRGraph)
{
m_DSRGraph = std::move(_DSRGraph);
}

/*!
 * @brief This function returns a constant reference to member DSRGraph
 * @return Constant reference to member DSRGraph
 */
const std::map<uint32_t, Content>& DSRGraphTopic::DSRGraph() const
{
    return m_DSRGraph;
}

/*!
 * @brief This function returns a reference to member DSRGraph
 * @return Reference to member DSRGraph
 */
std::map<uint32_t, Content>& DSRGraphTopic::DSRGraph()
{
    return m_DSRGraph;
}

size_t DSRGraphTopic::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;



    return current_align;
}

bool DSRGraphTopic::isKeyDefined()
{
   return false;
}

void DSRGraphTopic::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
}
